// <auto-generated />
using System;
using KurirServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KurirServer.Migrations
{
    [DbContext(typeof(KurirDbContext))]
    partial class KurirDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("KurirServer.Entities.Delivery", b =>
                {
                    b.Property<int>("DeliveryID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourierID");

                    b.Property<DateTime>("CreateTime");

                    b.Property<decimal>("DeliveryPrice");

                    b.Property<int>("DeliveryStatus");

                    b.Property<int>("DeliveryTypeID");

                    b.Property<string>("Description");

                    b.Property<int>("DispatcherID");

                    b.Property<string>("EndAddress");

                    b.Property<int?>("EndLocationID");

                    b.Property<DateTime>("EndTime");

                    b.Property<string>("NameEnd");

                    b.Property<string>("NameStart");

                    b.Property<int>("PaymentTypeID");

                    b.Property<string>("PhoneOfEnd");

                    b.Property<string>("PhoneOfStart");

                    b.Property<string>("StartAddress");

                    b.Property<int?>("StartLocationID");

                    b.Property<DateTime>("StartTime");

                    b.Property<int>("UserID");

                    b.Property<int>("WaitingInMinutes");

                    b.Property<int>("ZoneEnd");

                    b.Property<int>("ZoneStart");

                    b.HasKey("DeliveryID");

                    b.HasIndex("DeliveryTypeID");

                    b.HasIndex("EndLocationID");

                    b.HasIndex("PaymentTypeID");

                    b.HasIndex("StartLocationID");

                    b.HasIndex("UserID");

                    b.ToTable("Deliveries");

                    b.HasData(
                        new
                        {
                            DeliveryID = 1,
                            CourierID = 2,
                            CreateTime = new DateTime(2019, 9, 10, 12, 14, 0, 0, DateTimeKind.Unspecified),
                            DeliveryPrice = 160m,
                            DeliveryStatus = 0,
                            DeliveryTypeID = 1,
                            DispatcherID = 3,
                            EndAddress = "Temerinska 12/2",
                            EndTime = new DateTime(2019, 10, 3, 11, 33, 27, 242, DateTimeKind.Local).AddTicks(7046),
                            NameEnd = "marko",
                            NameStart = "Nikola",
                            PaymentTypeID = 1,
                            PhoneOfEnd = "0623339992",
                            PhoneOfStart = "0612889085",
                            StartAddress = "Kosovska 1/2",
                            StartTime = new DateTime(2019, 9, 10, 12, 24, 0, 0, DateTimeKind.Unspecified),
                            UserID = 1,
                            WaitingInMinutes = 0,
                            ZoneEnd = 1,
                            ZoneStart = 1
                        },
                        new
                        {
                            DeliveryID = 2,
                            CourierID = 2,
                            CreateTime = new DateTime(2019, 9, 10, 12, 14, 0, 0, DateTimeKind.Unspecified),
                            DeliveryPrice = 160m,
                            DeliveryStatus = 0,
                            DeliveryTypeID = 1,
                            DispatcherID = 3,
                            EndAddress = "Kosovska 12/2",
                            EndTime = new DateTime(2019, 10, 3, 11, 33, 27, 242, DateTimeKind.Local).AddTicks(8406),
                            NameEnd = "marija",
                            NameStart = "Nina",
                            PaymentTypeID = 2,
                            PhoneOfEnd = "0623339992",
                            PhoneOfStart = "0612889085",
                            StartAddress = "Temerinska 1/2",
                            StartTime = new DateTime(2019, 9, 10, 12, 24, 0, 0, DateTimeKind.Unspecified),
                            UserID = 1,
                            WaitingInMinutes = 0,
                            ZoneEnd = 1,
                            ZoneStart = 1
                        });
                });

            modelBuilder.Entity("KurirServer.Entities.DeliveryType", b =>
                {
                    b.Property<int>("DeliveryTypeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DeliveryTypeName")
                        .IsRequired();

                    b.HasKey("DeliveryTypeID");

                    b.ToTable("DeliveryTypes");

                    b.HasData(
                        new
                        {
                            DeliveryTypeID = 1,
                            DeliveryTypeName = "Regular"
                        },
                        new
                        {
                            DeliveryTypeID = 2,
                            DeliveryTypeName = "Return shipping"
                        },
                        new
                        {
                            DeliveryTypeID = 3,
                            DeliveryTypeName = "Shoping"
                        },
                        new
                        {
                            DeliveryTypeID = 4,
                            DeliveryTypeName = "Post service"
                        });
                });

            modelBuilder.Entity("KurirServer.Entities.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Altitude");

                    b.Property<DateTimeOffset>("DToffSet");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<int>("UserID");

                    b.HasKey("LocationID");

                    b.HasIndex("UserID");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("KurirServer.Entities.PaymentType", b =>
                {
                    b.Property<int>("PaymentTypeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PaymentTypeName");

                    b.HasKey("PaymentTypeID");

                    b.ToTable("PaymentTypes");

                    b.HasData(
                        new
                        {
                            PaymentTypeID = 1,
                            PaymentTypeName = "Kes"
                        },
                        new
                        {
                            PaymentTypeID = 2,
                            PaymentTypeName = "Preko racuna"
                        },
                        new
                        {
                            PaymentTypeID = 3,
                            PaymentTypeName = "Kupon"
                        });
                });

            modelBuilder.Entity("KurirServer.Entities.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName")
                        .IsRequired();

                    b.HasKey("RoleID");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleID = 1,
                            RoleName = "SuperAdmin"
                        },
                        new
                        {
                            RoleID = 2,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleID = 3,
                            RoleName = "User"
                        },
                        new
                        {
                            RoleID = 4,
                            RoleName = "Courier"
                        },
                        new
                        {
                            RoleID = 5,
                            RoleName = "Dispatcher"
                        });
                });

            modelBuilder.Entity("KurirServer.Entities.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActiveUserRoleID");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Mail")
                        .IsRequired();

                    b.Property<string>("Pass")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.Property<int>("Procenat");

                    b.Property<DateTime>("RegistrationDate");

                    b.HasKey("UserID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            ActiveUserRoleID = 0,
                            FirstName = "Marko",
                            IsActive = false,
                            LastName = "Mirkovic",
                            Mail = "marko@gmail.com",
                            Pass = "lol",
                            Phone = "023771642",
                            Procenat = 0,
                            RegistrationDate = new DateTime(2019, 10, 3, 11, 33, 27, 234, DateTimeKind.Local).AddTicks(956)
                        },
                        new
                        {
                            UserID = 2,
                            ActiveUserRoleID = 0,
                            FirstName = "Max",
                            IsActive = false,
                            LastName = "Fast",
                            Mail = "max@gmail.com",
                            Pass = "lol",
                            Phone = "023771642",
                            Procenat = 60,
                            RegistrationDate = new DateTime(2019, 10, 3, 11, 33, 27, 240, DateTimeKind.Local).AddTicks(9021)
                        },
                        new
                        {
                            UserID = 3,
                            ActiveUserRoleID = 0,
                            FirstName = "Matija",
                            IsActive = false,
                            LastName = "Levai",
                            Mail = "Matija@gmail.com",
                            Pass = "lol",
                            Phone = "023771642",
                            Procenat = 70,
                            RegistrationDate = new DateTime(2019, 10, 3, 11, 33, 27, 240, DateTimeKind.Local).AddTicks(9812)
                        });
                });

            modelBuilder.Entity("KurirServer.Entities.UserRole", b =>
                {
                    b.Property<int>("UserRoleID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleID");

                    b.Property<int>("UserID");

                    b.HasKey("UserRoleID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UserID");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserRoleID = 1,
                            RoleID = 1,
                            UserID = 3
                        },
                        new
                        {
                            UserRoleID = 2,
                            RoleID = 2,
                            UserID = 3
                        },
                        new
                        {
                            UserRoleID = 3,
                            RoleID = 3,
                            UserID = 3
                        },
                        new
                        {
                            UserRoleID = 4,
                            RoleID = 4,
                            UserID = 3
                        },
                        new
                        {
                            UserRoleID = 5,
                            RoleID = 5,
                            UserID = 3
                        },
                        new
                        {
                            UserRoleID = 6,
                            RoleID = 3,
                            UserID = 1
                        },
                        new
                        {
                            UserRoleID = 7,
                            RoleID = 3,
                            UserID = 2
                        },
                        new
                        {
                            UserRoleID = 8,
                            RoleID = 4,
                            UserID = 2
                        },
                        new
                        {
                            UserRoleID = 9,
                            RoleID = 5,
                            UserID = 2
                        });
                });

            modelBuilder.Entity("KurirServer.Entities.Delivery", b =>
                {
                    b.HasOne("KurirServer.Entities.DeliveryType", "DeliveryType")
                        .WithMany()
                        .HasForeignKey("DeliveryTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KurirServer.Entities.Location", "Endlocation")
                        .WithMany()
                        .HasForeignKey("EndLocationID");

                    b.HasOne("KurirServer.Entities.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KurirServer.Entities.Location", "Startlocation")
                        .WithMany()
                        .HasForeignKey("StartLocationID");

                    b.HasOne("KurirServer.Entities.User")
                        .WithMany("UsersDeliveries")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KurirServer.Entities.Location", b =>
                {
                    b.HasOne("KurirServer.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KurirServer.Entities.UserRole", b =>
                {
                    b.HasOne("KurirServer.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KurirServer.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
